#!/bin/bash

########################################################################
# Own Stuff here
########################################################################

# Less Colors for Man Pages
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

function strToLower () {
  echo ${1,,}
}

function ssh_mount () {
  sshfs cevo_live-server:/ /media/live-server/;
  sshfs cevo_test-server:/ /media/test-server/;
  echo "#################################"
  echo "#             Done              #"
  echo "#################################"
}

# Benachrichtigungen bei langen Prozessen
if [ -x /usr/bin/notify-send ]; then
  alias alert='notify-send -i gnome-terminal "[$?] $(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/;\s*alert$//'\'')"'
fi

#git
alias gmnff='git merge --no-ff'
alias gmff='git merge --ff'

#prompt
PROMPT="${BGreen}\u${BBlue}::${BRed}\h${Blue}{${BBlue}\w${Blue}${BGreen} ->${Color_Off} "

########################################################################

### Configuration
# Some of my configurations stuff here...
EDITOR="vim"
PAGER="less"

export EDITOR="$EDITOR"

# For longer commands this is useful sometimes
miniprompt() {
        PS1='$ '
}

# Finally make prompt
PS1="${PROMPT}"

### Aliases
# List directory contents
alias sl=ls
#alias ls='ls -G' # Compact view, show colors
alias la='ls -AF' # Compact view, show hidden
alias ll='ls -al'
alias l='ls -lah'
alias c='clear'
alias k='clear'
alias q="exit"
alias h='history'

alias editor="$EDITOR"
alias pager="$PAGER"

alias ..='cd ..' # Go up one directory
alias ...='cd ../..' # Go up two directories
alias -- -="cd -" # Go back



# Tree
alias tree-bash="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

# Directory
alias md='mkdir -p'
alias rd=rmdir
alias d='dirs -v'

# lazyness ftw
alias reload='source ~/.bashrc'
alias ducks='du -cks * | sort -rn | head -11 '
alias xmod='chmod +x'
alias timestamp='date "+%Y%m%dT%H%M%S"'
alias whereami='echo "$( hostname --fqdn ) ($(hostname -i)):$( pwd )"' # Complement to whoami command.

### History - made right.
# history length
HISTSIZE=10000
HISTFILESIZE=10000

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# setting up timestamp for history
HISTTIMEFORMAT="%F %T "

# Reverse History
function rh {
  history | awk '{a[$4]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# append to the history file, don't overwrite it
shopt -s histappend

##########################################################
# Git Teil
##########################################################
alias git_us='LANG=en_US git'

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
COLOR_NONE="\[\e[0m\]"

function pparse_git_branch {
  git rev-parse --git-dir &> /dev/null
  git_status="$(git_us status 2> /dev/null)"
  branch_pattern="^# On branch ([^${IFS}]*)"
  detached_branch_pattern="^#.*while rebasing branch"
  remote_pattern="# Your branch is (.*) of"
  diverge_pattern="# Your branch and (.*) have diverged"

  if [[ ${git_status}} =~ "Changed but not updated" ]]; then
    state="${RED}⚡"
  fi
  # add an else if or two here if you want to get more specific
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="${YELLOW}↑"
    else
      remote="${YELLOW}↓"
    fi
  fi

  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="${YELLOW}↕"
  fi

  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
    branch="${YELLOW}NO BRANCH"
  fi

  if [[ ${#state} -gt "0" || ${#remote} -gt "0" ]]; then
    s=" "
  fi

  echo " ${branch}${s}${remote}${state}"
}

function prompt_func() {
  git rev-parse --git-dir > /dev/null 2>&1

  if [ $? -eq 0 ]; then
    prompt="${TITLEBAR}${BLUE}[${RED}\W${GREEN}$(pparse_git_branch)${BLUE}]${COLOR_NONE} "
    PS1="${prompt}$ "
  else
    PS1=$PSAVE
  fi
}

export PSAVE=$PS1

PROMPT_COMMAND=prompt_func
