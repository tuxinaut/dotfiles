#!/bin/bash

########################################################################
# Own Stuff here
########################################################################

# Is needed for using the unity-control-center with all it's features
export XDG_CURRENT_DESKTOP="Unity"

export PATH="$PATH:/opt/vertica/bin"
export LC_ALL='en_US.UTF-8'

# https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
export GPG_TTY=$(tty)

. $NANOBASH_HOME/aws.bash

function strToLower () {
  echo ${1,,}
}

function strToUpper () {
  echo ${1^^}
}

# Set the title of a terminal with a special escape sequence
function setTerminalTitel () {
  echo -ne "\033]0;"$@"\007"
}

function getCommiters () {
  git shortlog -se -- $1 | tr -d '[:digit:]' | sed -e 's/^[ \t]*//' | sed -e 's/^/# /'
}

function getDateFromTimeStamp()
{
  date "+%F %T" --date=@$1
}

function graphite_event() {
  if test "$1" = "NOW"; then
    WHEN=$(date -u +%s)
  else
    WHEN=$(date -u -d "$1 $(date +%z)" +%s 2>/dev/null)
    if test $? -gt 0; then
      echo "Something was wrong with the date"
      return 0
    fi
  fi

  if test -z "$2"; then
    echo "What is empty"
    return 0
  else
    WHAT=$2
  fi

  if test -z "$3"; then
    echo "Tag(s) is empty"
    return 0
  else
    TAGS=$3
  fi

  if test -z "$4"; then
    DATA="NOT SET"
  else
    DATA=$4
  fi

  echo "WHEN: $WHEN ($(date -u -d @$WHEN))"
  echo "WHAT: $WHAT"
  echo "TAGS: $TAGS"
  echo "DATA: $DATA"
  echo ""
  echo -n "If everthing is ok enter y : "

  read -n 1  -e TMP

  case $TMP in
    'y')
      curl -X POST "http://graphite.smaato.net/events/" -d '{"when": '$WHEN',"what": "'"$WHAT"'", "tags": "'"$TAGS"'", "data": "'"$DATA"'"}'
    ;;
    *)

    ;;
  esac
}

# enable aws cli autocomplete
complete -C aws_completer aws

# Benachrichtigungen bei langen Prozessen
if [ -x /usr/bin/notify-send ]; then
  alias alert='notify-send -i gnome-terminal "[$?] $(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/;\s*alert$//'\'')"'
fi

alias grep='grep --color="always"'

########################################################################

### Configuration
# Some of my configurations stuff here...
EDITOR="vim"
PAGER="less"

export EDITOR="$EDITOR"

# For longer commands this is useful sometimes
function miniprompt() {
  PS1='$ '
  PROMPT_COMMAND=miniprompt
  syn_history
}

function ansibleprompt() {
  setTerminalTitel "Ansible Magic"

  PROMPT="${Purple}[${BBlack}\$?${Color_Off}${Purple}] ${Purple}\A${Color_Off}${Blue} ( ${IYellow}Ansible PROFILE: ${BGreen}${ANSIBLE_ENV}${Color_Off}${Blue} ) ${Color_Off} "
  PS1="${PROMPT}$ "
  PROMPT_COMMAND=ansibleprompt
  syn_history
}

function awsprompt() {
  setTerminalTitel "AWS Magic"

  PROMPT="${Purple}[${BBlack}\$?${Color_Off}${Purple}] ${Purple}\A${Color_Off}${Blue} ( ${IYellow}AWS PROFILE: ${BGreen}${AWS_DEFAULT_REGION} ${Blue}- ${BGreen}${AWS_DEFAULT_PROFILE}${Color_Off}${Blue} ) ${Color_Off} "
  PS1="${PROMPT}$ "
  PROMPT_COMMAND=awsprompt
  syn_history
}

function prompt_func() {
  PROMPT="${Purple}[${BBlack}\$?${Color_Off}${Purple}] ${Purple}\A${Color_Off} ${BGreen}\u${BBlue}::${BRed}\h${Blue} { ${BBlue}\w${Blue} } ${BGreen}->${Color_Off} "
  PS1="${PROMPT}$ "
}

PROMPT_COMMAND=prompt_func

# Git prompt properties

GIT_PROMPT_ONLY_IN_REPO=1
GIT_PROMPT_THEME=Single_line_Ubuntu
GIT_PROMPT_SHOW_UPSTREAM=1

[ -s "$HOME/.bash-git-prompt/gitprompt.sh" ] && source "$HOME/.bash-git-prompt/gitprompt.sh"

# Git prompt ende

### Aliases
# List directory contents
alias sl=ls
#alias ls='ls -G' # Compact view, show colors
#alias la='ls -AF' # Compact view, show hidden
#alias ll='ls -al'
alias lh='ls -lht'
alias l='ls -lah'
alias k='clear'
alias q="exit"
alias h='history'

alias editor="$EDITOR"
alias pager="$PAGER"

alias ..='cd ..' # Go up one directory
alias ...='cd ../..' # Go up two directories
alias ....='cd ../../..' # Go up three directories
alias -- -="cd -" # Go back

alias remove_vim_temp_files="find . -name '*.sw[op]' -print0 | xargs -0 rm -v"
alias gextended="grep -EiR"

alias gshowme='g log --patch-with-stat --author="Denny"'

function anonym_ssh() {
  ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "ubuntu@${1}"
}

alias screen_shoot='FILE="${HOME}/Pictures/screenshoots/screenshoot_$(date "+%Y%m%dT%H%M%S").png"; sleep 3s; import -window root "$FILE" && export LAST_SCREENSHOT="${FILE}" && notify-send "$FILE is Ready" && echo "${FILE}"'

alias ti='task add due:tomorrow tag:inbox'

# Tree
alias tree-bash="find . -not -path './.git/*' -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

# Directory
alias md='mkdir -p'
alias rd=rmdir
alias d='dirs -v'

# lazyness ftw
alias reload='source ~/.bashrc'
alias ducks='du -cks * | sort -rn | head -11 '
alias xmod='chmod +x'
alias timestamp='date "+%Y%m%dT%H%M%S"'
alias whereami='echo "$( hostname --fqdn ) ($(hostname -i)):$( pwd )"' # Complement to whoami command.

### History - made right.

export HH_CONFIG=hicolor                              # get more colors
shopt -s histappend                                   # append new history items to .bash_history
export HISTCONTROL=ignorespace:ignoredups:ignorespace # leading space hides commands from history, no duplicate lines in the history.
export HISTFILESIZE=1000000                           # increase history file size (default is 500)
export HISTSIZE=${HISTFILESIZE}                       # increase history size (default is 500)
export HISTTIMEFORMAT="%F %T "                        # setting up timestamp for history

# if this is interactive shell, then bind hh to Ctrl-r (for Vi mode check doc)
if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hh -- \C-j"'; fi

syn_history ()
{
  export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"   # mem/file sync
}

syn_history

# Reverse History
function rh {
  history | awk '{a[$4]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}
